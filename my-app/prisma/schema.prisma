generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  tag             String?
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  accounts        Account[]
  purchaseHistory PurchaseHistory[]
  favourites      Favourite[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_set       Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Item {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  imageSrc        String
  createdAt       DateTime          @default(now())
  category        String
  calories        Int
  availability    Boolean
  location        String
  price           Int
  PurchaseHistory PurchaseHistory[]
  Favourite       Favourite[]
}

model PurchaseHistory {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemId       String   @db.ObjectId
  item         Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  purchaseDate DateTime
  calories     Int?
  totalPrice   Int
  location     String?
}

model Favourite {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemId String @db.ObjectId
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
}
